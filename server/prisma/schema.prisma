generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  CLOTHING
  ELECTRONICS
  BEAUTY
}

enum RecommendFor {
  MEN
  WOMEN
  KIDS
}

enum Size {
  S
  M
  L
  XL
}

model User {
  id        String    @id @default(uuid())
  firstName String?
  lastName  String?
  email     String    @unique
  password  String?
  googleId  String?   @unique
  provider  String    @default("credentials")
  products  Product[] @relation("UserProducts")
  reviews   Reviews[] @relation("UserReviews")
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id           String       @id @default(uuid())
  productName  String
  description  String
  price        Float
  discount     Float?
  subCategory  String?
  rating       Float?
  isWishlist   Boolean?     @default(false)
  title        String
  userId       String
  imageKeys    String[]
  category     Category
  recommendFor RecommendFor
  size         Size
  user         User         @relation("UserProducts", fields: [userId], references: [id])
  reviews      Reviews[]    @relation("ProductReviews")
  cartItems    CartItem[]   @relation("ProductCartItems")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Reviews {
  id        String   @id @default(uuid())
  comment   String?
  rating    Float?
  productId String
  userId    String
  product   Product  @relation("ProductReviews", fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id         String  @id @default(uuid())
  productId  String
  cartId     String
  quantity   Int
  priceAtAdd Float?
  cart       Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product    Product @relation("ProductCartItems", fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime? @updatedAt
}
